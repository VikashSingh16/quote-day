{"version":3,"sources":["Components/quotesPages/HighlightedQuote.module.css","Components/comments/CommentItem.module.css","Components/comments/CommentsList.module.css","Components/quotesPages/HighlightedQuote.js","Components/comments/CommentItem.js","Components/comments/CommentsList.js","Components/comments/NewCommentForm.js","Components/comments/Comments.js","Components/Pages/QuoteDetails.js"],"names":["module","exports","HighlightedQuote","props","className","classes","rowDiv","newBlockquote","quote","author","CommentItem","liList","text","CommentsList","ulList","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","onSubmit","event","preventDefault","enteredtext","current","value","commentData","quoteId","class","for","rows","ref","required","type","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","LoadingSpinner","length","onClick","QuoteDetail","params","getSingleQuote","loadedQuote","match","useRouteMatch","path","exact","role","to","url"],"mappings":"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","file":"static/js/4.34dbe365.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"rowDiv\":\"HighlightedQuote_rowDiv__2-_Lb\",\"quotesItem\":\"HighlightedQuote_quotesItem__3RoOx\",\"newBlockquote\":\"HighlightedQuote_newBlockquote__jmOoI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"liList\":\"CommentItem_liList__1hhJi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ulList\":\"CommentsList_ulList__2nNCO\"};","import classes from './HighlightedQuote.module.css';\r\n\r\nconst HighlightedQuote=(props)=>{\r\n    return (\r\n         <div className={classes.rowDiv}>\r\n          <blockquote className={classes.newBlockquote}>  \r\n           <p><strong>{props.quote}</strong></p>\r\n            <cite>{props.author}</cite>\r\n          </blockquote>\r\n          </div>  \r\n      \r\n\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default HighlightedQuote;","import classes from './CommentItem.module.css'\r\n\r\nconst CommentItem = (props) => {\r\n  return (\r\n    <li className={classes.liList}>\r\n      {props.text}\r\n    </li>\r\n  \r\n  );\r\n};\r\n\r\nexport default CommentItem;\r\n","import CommentItem from \"./CommentItem\";\r\nimport classes from './CommentsList.module.css';\r\n\r\nconst CommentsList=(props)=>{\r\n    return (\r\n    <ul className={classes.ulList}>\r\n       {props.comments.map((comment) => (\r\n        <CommentItem key={comment.id} text={comment.text} />\r\n      ))}\r\n    </ul>\r\n    );\r\n\r\n}\r\nexport default CommentsList;","import { useRef,useEffect } from 'react';\r\nimport useHttp from '../hooks/use-http';\r\nimport {addComment} from '../lib/api';\r\n\r\n\r\nconst NewCommentForm = (props) => {\r\n  const commentTextRef = useRef();\r\n  const {sendRequest,status,error}=useHttp(addComment);\r\n\r\n  const {onAddedComment}=props;\r\n\r\n  useEffect(()=>{\r\n    if(status==='completed' && !error){\r\n      onAddedComment()\r\n    }\r\n\r\n  },[status,error,onAddedComment])\r\n\r\n  const submitFormHandler = (event) => {\r\n    event.preventDefault();\r\n    const enteredtext=commentTextRef.current.value;\r\n\r\n\r\n    // optional: Could validate here\r\n\r\n    // send comment to server \r\n    sendRequest({commentData:{text:enteredtext},quoteId:props.quoteId})\r\n  };\r\n\r\n  return (\r\n    <form  className=\"form\" onSubmit={submitFormHandler}>\r\n      <div class=\"form-group\">\r\n       <label for=\"comment\">Comment:</label>\r\n      <textarea class=\"form-control\" rows=\"5\" id=\"comment\" ref={commentTextRef} required></textarea>\r\n     </div>\r\n     <button type=\"submit\" class=\"btn btn-primary btn-sm centeredExtra\">Add Comment</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NewCommentForm;\r\n","import { useEffect,useState,useCallback } from \"react\";\r\nimport CommentsList from \"./CommentsList\";\r\nimport NewCommentForm from \"./NewCommentForm\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport useHttp from '../hooks/use-http';\r\nimport {getAllComments} from '../lib/api';\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\n\r\nconst Comments=()=>{\r\n    const [isAddingComment, setIsAddingComment] = useState(false);\r\n    const {quoteId} =useParams();\r\n    const {sendRequest,status,data:loadedComments}=useHttp(getAllComments);\r\n\r\n\r\n    useEffect(()=>{\r\n        sendRequest(quoteId);\r\n      },[sendRequest,quoteId]);\r\n\r\n      const startAddCommentHandler = () => {\r\n        setIsAddingComment(true);\r\n      };\r\n\r\n      const addedCommentHandler=useCallback(()=>{\r\n        sendRequest(quoteId);\r\n     },[sendRequest,quoteId])\r\n   \r\n     let comments;\r\n   \r\n     if(status==='pending'){\r\n       comments=<div className=\"cenetered\">\r\n           <LoadingSpinner />\r\n         </div>;\r\n     }\r\n   \r\n     if(status==='completed' && (loadedComments || loadedComments.length>0)){\r\n       comments=<CommentsList comments={loadedComments}/>\r\n     }\r\n     \r\n     if(status==='completed' && (!loadedComments || loadedComments.length===0)){\r\n       comments=<p className='centered'>No Comments were added yet.</p>\r\n     }\r\n   \r\n    \r\n  \r\n    return (\r\n        <section >\r\n            <h3>User Comments</h3>\r\n            {!isAddingComment && (\r\n             <button className='btn btn-info btn-sm  centered' onClick={startAddCommentHandler}>\r\n                Add a Comment\r\n            </button>\r\n           )}\r\n    {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommentHandler}/>}\r\n       {comments}\r\n        </section>\r\n    );\r\n\r\n}\r\nexport default Comments;","import { useEffect } from \"react\";\r\nimport HighlightedQuote from \"../quotesPages/HighlightedQuote\";\r\nimport { useParams, Route, Link,useRouteMatch } from \"react-router-dom\";\r\nimport useHttp from '../hooks/use-http';\r\nimport {getSingleQuote} from '../lib/api';\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport Comments from \"../comments/Comments\";\r\n\r\nconst QuoteDetail=()=>{\r\n const params = useParams();\r\n  \r\n  const {sendRequest,status,data:loadedQuote,error}=useHttp(getSingleQuote);\r\n  const match=useRouteMatch();\r\n  const {quoteId}=params;\r\n  \r\n  useEffect(()=>{\r\n    sendRequest(quoteId)\r\n  },[sendRequest,quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"cenetered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n  if(error){\r\n    return <p className='centered focused'>{error}</p>\r\n}\r\nif (!loadedQuote) {\r\n    return <p>No Data Found</p>;\r\n  }\r\n\r\n    return (\r\n        <div className=\"container py-5 h-100 \">\r\n            <div className=\"row\">\r\n            <div className=\"col-lg-12 col-xl-12 col-md-12 col-sm-12 col-12 d-flex \">\r\n            <HighlightedQuote quote={loadedQuote.quote} author={loadedQuote.author}/>\r\n            </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-lg-10 d-flex justify-content-center\">\r\n            <Route path={match.path} exact>\r\n                <Link className=\"btn btn-info loadButton\" role=\"button\" to={`${match.url}/comments`} >\r\n                    Load Comments\r\n                </Link>\r\n            </Route>\r\n            </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-lg-10 d-flex justify-content-center\">\r\n              <Route path={`${match.path}/comments`}>\r\n                <Comments/>\r\n              </Route>\r\n            </div>\r\n            </div>\r\n            </div>\r\n        \r\n\r\n    );\r\n\r\n}\r\n\r\nexport default QuoteDetail;"],"sourceRoot":""}